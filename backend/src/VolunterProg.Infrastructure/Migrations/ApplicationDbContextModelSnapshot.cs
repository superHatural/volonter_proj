// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using VolunterProg.Infrastructure;

#nullable disable

namespace VolunterProg.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("VolunterProg.Domain.Voluunters.Breed", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("species_id")
                        .HasColumnType("uuid")
                        .HasColumnName("species_id");

                    b.ComplexProperty<Dictionary<string, object>>("Title", "VolunterProg.Domain.Voluunters.Breed.Title#NotEmptyVo", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("title");
                        });

                    b.HasKey("Id")
                        .HasName("pk_breeds");

                    b.HasIndex("species_id")
                        .HasDatabaseName("ix_breeds_species_id");

                    b.ToTable("breeds", (string)null);
                });

            modelBuilder.Entity("VolunterProg.Domain.Voluunters.Pet", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("Height")
                        .HasMaxLength(100)
                        .HasColumnType("integer")
                        .HasColumnName("height");

                    b.Property<bool>("IsCastrated")
                        .HasColumnType("boolean")
                        .HasColumnName("is_castrated");

                    b.Property<bool>("IsVaccinated")
                        .HasColumnType("boolean")
                        .HasColumnName("is_vaccinated");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<int>("Weight")
                        .HasMaxLength(100)
                        .HasColumnType("integer")
                        .HasColumnName("weight");

                    b.Property<Guid?>("volunter_id")
                        .HasColumnType("uuid")
                        .HasColumnName("volunter_id");

                    b.ComplexProperty<Dictionary<string, object>>("Address", "VolunterProg.Domain.Voluunters.Pet.Address#Address", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("city");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("country");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("postal_code");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("street");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("BirthDate", "VolunterProg.Domain.Voluunters.Pet.BirthDate#Date", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("DateTime")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("birth_date");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Color", "VolunterProg.Domain.Voluunters.Pet.Color#NotEmptyVo", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("color");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("DateOfCreate", "VolunterProg.Domain.Voluunters.Pet.DateOfCreate#Date", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("DateTime")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("date_of_create");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Description", "VolunterProg.Domain.Voluunters.Pet.Description#NotEmptyVo", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasMaxLength(2000)
                                .HasColumnType("character varying(2000)")
                                .HasColumnName("description");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("HealthInfo", "VolunterProg.Domain.Voluunters.Pet.HealthInfo#NotEmptyVo", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasMaxLength(2000)
                                .HasColumnType("character varying(2000)")
                                .HasColumnName("description");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Name", "VolunterProg.Domain.Voluunters.Pet.Name#NotEmptyVo", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("phone_number");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("PhoneNumber", "VolunterProg.Domain.Voluunters.Pet.PhoneNumber#Phone", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("PhoneNumber")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("phone_number");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("SpeciesDetails", "VolunterProg.Domain.Voluunters.Pet.SpeciesDetails#SpeciesDetails", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<Guid>("BreedId")
                                .HasMaxLength(100)
                                .HasColumnType("uuid")
                                .HasColumnName("breed_id");

                            b1.Property<Guid>("SpeciesId")
                                .HasMaxLength(100)
                                .HasColumnType("uuid")
                                .HasColumnName("species_id");
                        });

                    b.HasKey("Id")
                        .HasName("pk_pets");

                    b.HasIndex("volunter_id")
                        .HasDatabaseName("ix_pets_volunter_id");

                    b.ToTable("pets", (string)null);
                });

            modelBuilder.Entity("VolunterProg.Domain.Voluunters.Species", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.ComplexProperty<Dictionary<string, object>>("Title", "VolunterProg.Domain.Voluunters.Species.Title#NotEmptyVo", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("title");
                        });

                    b.HasKey("Id")
                        .HasName("pk_species");

                    b.ToTable("species", (string)null);
                });

            modelBuilder.Entity("VolunterProg.Domain.Voluunters.Voluunter", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("Experience")
                        .HasMaxLength(2000)
                        .HasColumnType("integer")
                        .HasColumnName("experience");

                    b.ComplexProperty<Dictionary<string, object>>("Description", "VolunterProg.Domain.Voluunters.Voluunter.Description#NotEmptyVo", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(2000)
                                .HasColumnType("character varying(2000)")
                                .HasColumnName("description");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Email", "VolunterProg.Domain.Voluunters.Voluunter.Email#Email", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("EmailAddress")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("email");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("FullName", "VolunterProg.Domain.Voluunters.Voluunter.FullName#FullName", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("first_name");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("last_name");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("PhoneNumber", "VolunterProg.Domain.Voluunters.Voluunter.PhoneNumber#Phone", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("PhoneNumber")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("phone_number");
                        });

                    b.HasKey("Id")
                        .HasName("pk_voluunters");

                    b.ToTable("voluunters", (string)null);
                });

            modelBuilder.Entity("VolunterProg.Domain.Voluunters.Breed", b =>
                {
                    b.HasOne("VolunterProg.Domain.Voluunters.Species", null)
                        .WithMany("Breeds")
                        .HasForeignKey("species_id")
                        .HasConstraintName("fk_breeds_species_species_id");
                });

            modelBuilder.Entity("VolunterProg.Domain.Voluunters.Pet", b =>
                {
                    b.HasOne("VolunterProg.Domain.Voluunters.Voluunter", null)
                        .WithMany("Pets")
                        .HasForeignKey("volunter_id")
                        .HasConstraintName("fk_pets_voluunters_volunter_id");

                    b.OwnsOne("VolunterProg.Domain.Voluunters.PetDetails", "Details", b1 =>
                        {
                            b1.Property<Guid>("PetId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.HasKey("PetId");

                            b1.ToTable("pets");

                            b1.ToJson("Details");

                            b1.WithOwner()
                                .HasForeignKey("PetId")
                                .HasConstraintName("fk_pets_pets_id");

                            b1.OwnsMany("VolunterProg.Domain.Voluunters.Requisite", "Requisites", b2 =>
                                {
                                    b2.Property<Guid>("PetDetailsPetId")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    b2.Property<string>("Description")
                                        .IsRequired()
                                        .HasMaxLength(2000)
                                        .HasColumnType("character varying(2000)");

                                    b2.Property<string>("Title")
                                        .IsRequired()
                                        .HasMaxLength(100)
                                        .HasColumnType("character varying(100)");

                                    b2.HasKey("PetDetailsPetId", "Id")
                                        .HasName("pk_pets");

                                    b2.ToTable("pets");

                                    b2.WithOwner()
                                        .HasForeignKey("PetDetailsPetId")
                                        .HasConstraintName("fk_pets_pets_pet_details_pet_id");
                                });

                            b1.OwnsMany("VolunterProg.Domain.Voluunters.PetPhoto", "PetPhotos", b2 =>
                                {
                                    b2.Property<Guid>("PetDetailsPetId")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    b2.Property<bool>("IsMainImage")
                                        .HasColumnType("boolean");

                                    b2.Property<string>("Path")
                                        .IsRequired()
                                        .HasMaxLength(100)
                                        .HasColumnType("character varying(100)");

                                    b2.HasKey("PetDetailsPetId", "Id")
                                        .HasName("pk_pets");

                                    b2.ToTable("pets");

                                    b2.WithOwner()
                                        .HasForeignKey("PetDetailsPetId")
                                        .HasConstraintName("fk_pets_pets_pet_details_pet_id");
                                });

                            b1.Navigation("PetPhotos");

                            b1.Navigation("Requisites");
                        });

                    b.Navigation("Details");
                });

            modelBuilder.Entity("VolunterProg.Domain.Voluunters.Voluunter", b =>
                {
                    b.OwnsOne("VolunterProg.Domain.Voluunters.VoluunterDetails", "Details", b1 =>
                        {
                            b1.Property<Guid>("VoluunterId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.HasKey("VoluunterId");

                            b1.ToTable("voluunters");

                            b1.ToJson("Details");

                            b1.WithOwner()
                                .HasForeignKey("VoluunterId")
                                .HasConstraintName("fk_voluunters_voluunters_id");

                            b1.OwnsMany("VolunterProg.Domain.Voluunters.SocialMedia", "SocialMedias", b2 =>
                                {
                                    b2.Property<Guid>("VoluunterDetailsVoluunterId")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    b2.Property<string>("Title")
                                        .IsRequired()
                                        .HasMaxLength(100)
                                        .HasColumnType("character varying(100)");

                                    b2.Property<string>("Url")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.HasKey("VoluunterDetailsVoluunterId", "Id")
                                        .HasName("pk_voluunters");

                                    b2.ToTable("voluunters");

                                    b2.WithOwner()
                                        .HasForeignKey("VoluunterDetailsVoluunterId")
                                        .HasConstraintName("fk_voluunters_voluunters_voluunter_details_voluunter_id");
                                });

                            b1.OwnsMany("VolunterProg.Domain.Voluunters.Requisite", "Requisites", b2 =>
                                {
                                    b2.Property<Guid>("VoluunterDetailsVoluunterId")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    b2.Property<string>("Description")
                                        .IsRequired()
                                        .HasMaxLength(2000)
                                        .HasColumnType("character varying(2000)");

                                    b2.Property<string>("Title")
                                        .IsRequired()
                                        .HasMaxLength(100)
                                        .HasColumnType("character varying(100)");

                                    b2.HasKey("VoluunterDetailsVoluunterId", "Id")
                                        .HasName("pk_voluunters");

                                    b2.ToTable("voluunters");

                                    b2.WithOwner()
                                        .HasForeignKey("VoluunterDetailsVoluunterId")
                                        .HasConstraintName("fk_voluunters_voluunters_voluunter_details_voluunter_id");
                                });

                            b1.Navigation("Requisites");

                            b1.Navigation("SocialMedias");
                        });

                    b.Navigation("Details")
                        .IsRequired();
                });

            modelBuilder.Entity("VolunterProg.Domain.Voluunters.Species", b =>
                {
                    b.Navigation("Breeds");
                });

            modelBuilder.Entity("VolunterProg.Domain.Voluunters.Voluunter", b =>
                {
                    b.Navigation("Pets");
                });
#pragma warning restore 612, 618
        }
    }
}
