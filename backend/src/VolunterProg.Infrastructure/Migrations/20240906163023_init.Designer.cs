// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using VolunterProg.Infrastructure;

#nullable disable

namespace VolunterProg.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240906163023_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("VolunterProg.Domain.Voluunters.Pet", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("BirthDate")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("birth_date");

                    b.Property<string>("Breed")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("breed");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("color");

                    b.Property<string>("DateOfCreate")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("date_of_create");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("description");

                    b.Property<string>("HealthInfo")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("health_info");

                    b.Property<string>("Height")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("height");

                    b.Property<bool>("IsCastrated")
                        .HasColumnType("boolean")
                        .HasColumnName("is_castrated");

                    b.Property<bool>("IsVaccinated")
                        .HasColumnType("boolean")
                        .HasColumnName("is_vaccinated");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("phone_number");

                    b.Property<string>("Species")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("species");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<string>("Weight")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("weight");

                    b.Property<Guid?>("volunter_id")
                        .HasColumnType("uuid")
                        .HasColumnName("volunter_id");

                    b.HasKey("Id")
                        .HasName("pk_pets");

                    b.HasIndex("volunter_id")
                        .HasDatabaseName("ix_pets_volunter_id");

                    b.ToTable("pets", (string)null);
                });

            modelBuilder.Entity("VolunterProg.Domain.Voluunters.Voluunter", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("description");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<int>("Experience")
                        .HasMaxLength(2000)
                        .HasColumnType("integer")
                        .HasColumnName("experience");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("full_name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("phone_number");

                    b.HasKey("Id")
                        .HasName("pk_voluunters");

                    b.ToTable("voluunters", (string)null);
                });

            modelBuilder.Entity("VolunterProg.Domain.Voluunters.Pet", b =>
                {
                    b.HasOne("VolunterProg.Domain.Voluunters.Voluunter", null)
                        .WithMany("Pets")
                        .HasForeignKey("volunter_id")
                        .HasConstraintName("fk_pets_voluunters_volunter_id");

                    b.OwnsOne("VolunterProg.Domain.Voluunters.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("PetId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("city");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("country");

                            b1.HasKey("PetId");

                            b1.ToTable("pets");

                            b1.WithOwner()
                                .HasForeignKey("PetId")
                                .HasConstraintName("fk_pets_pets_id");
                        });

                    b.OwnsOne("VolunterProg.Domain.Voluunters.PetDetails", "Details", b1 =>
                        {
                            b1.Property<Guid>("PetId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.HasKey("PetId");

                            b1.ToTable("pets");

                            b1.ToJson("Details");

                            b1.WithOwner()
                                .HasForeignKey("PetId")
                                .HasConstraintName("fk_pets_pets_id");

                            b1.OwnsMany("VolunterProg.Domain.Voluunters.Requisite", "Requisites", b2 =>
                                {
                                    b2.Property<Guid>("PetDetailsPetId")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    b2.Property<string>("Description")
                                        .IsRequired()
                                        .HasMaxLength(2000)
                                        .HasColumnType("character varying(2000)");

                                    b2.Property<string>("Title")
                                        .IsRequired()
                                        .HasMaxLength(100)
                                        .HasColumnType("character varying(100)");

                                    b2.HasKey("PetDetailsPetId", "Id")
                                        .HasName("pk_pets");

                                    b2.ToTable("pets");

                                    b2.WithOwner()
                                        .HasForeignKey("PetDetailsPetId")
                                        .HasConstraintName("fk_pets_pets_pet_details_pet_id");
                                });

                            b1.OwnsMany("VolunterProg.Domain.Voluunters.PetPhoto", "PetPhotos", b2 =>
                                {
                                    b2.Property<Guid>("PetDetailsPetId")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    b2.Property<bool>("IsMainImage")
                                        .HasColumnType("boolean");

                                    b2.Property<string>("Path")
                                        .IsRequired()
                                        .HasMaxLength(100)
                                        .HasColumnType("character varying(100)");

                                    b2.HasKey("PetDetailsPetId", "Id")
                                        .HasName("pk_pets");

                                    b2.ToTable("pets");

                                    b2.WithOwner()
                                        .HasForeignKey("PetDetailsPetId")
                                        .HasConstraintName("fk_pets_pets_pet_details_pet_id");
                                });

                            b1.Navigation("PetPhotos");

                            b1.Navigation("Requisites");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Details");
                });

            modelBuilder.Entity("VolunterProg.Domain.Voluunters.Voluunter", b =>
                {
                    b.OwnsOne("VolunterProg.Domain.Voluunters.VoluunterDetails", "Details", b1 =>
                        {
                            b1.Property<Guid>("VoluunterId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.HasKey("VoluunterId");

                            b1.ToTable("voluunters");

                            b1.ToJson("Details");

                            b1.WithOwner()
                                .HasForeignKey("VoluunterId")
                                .HasConstraintName("fk_voluunters_voluunters_id");

                            b1.OwnsMany("VolunterProg.Domain.Voluunters.SocialMedia", "SocialMedias", b2 =>
                                {
                                    b2.Property<Guid>("VoluunterDetailsVoluunterId")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    b2.Property<string>("Title")
                                        .IsRequired()
                                        .HasMaxLength(100)
                                        .HasColumnType("character varying(100)");

                                    b2.Property<string>("Url")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.HasKey("VoluunterDetailsVoluunterId", "Id")
                                        .HasName("pk_voluunters");

                                    b2.ToTable("voluunters");

                                    b2.WithOwner()
                                        .HasForeignKey("VoluunterDetailsVoluunterId")
                                        .HasConstraintName("fk_voluunters_voluunters_voluunter_details_voluunter_id");
                                });

                            b1.OwnsMany("VolunterProg.Domain.Voluunters.Requisite", "Requisites", b2 =>
                                {
                                    b2.Property<Guid>("VoluunterDetailsVoluunterId")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    b2.Property<string>("Description")
                                        .IsRequired()
                                        .HasMaxLength(2000)
                                        .HasColumnType("character varying(2000)");

                                    b2.Property<string>("Title")
                                        .IsRequired()
                                        .HasMaxLength(100)
                                        .HasColumnType("character varying(100)");

                                    b2.HasKey("VoluunterDetailsVoluunterId", "Id")
                                        .HasName("pk_voluunters");

                                    b2.ToTable("voluunters");

                                    b2.WithOwner()
                                        .HasForeignKey("VoluunterDetailsVoluunterId")
                                        .HasConstraintName("fk_voluunters_voluunters_voluunter_details_voluunter_id");
                                });

                            b1.Navigation("Requisites");

                            b1.Navigation("SocialMedias");
                        });

                    b.Navigation("Details")
                        .IsRequired();
                });

            modelBuilder.Entity("VolunterProg.Domain.Voluunters.Voluunter", b =>
                {
                    b.Navigation("Pets");
                });
#pragma warning restore 612, 618
        }
    }
}
